const {Transformer} = require('@parcel/plugin');
const {default: JSTransformer} = require('@parcel/transformer-js');
const CONFIG = Symbol.for('parcel-plugin-config');
console.log(JSTransformer[CONFIG]);
const path = require('path');
//let wait = ms => new Promise(resolve => setTimeout(resolve, ms));

const waitMap = new Map();

function wait(filePath) {
  if (waitMap.has(filePath)) {
    return Promise.resolve();
  }
  return new Promise(resolve => {
    waitMap.set(filePath, resolve);
  });
}
// a set of filepaths that have been read
function seen(filePath) {
  // check map of things we're waiting for to resolved promises
  let promisesToResolve = waitMap.get(filePath);
  if (promisesToResolve) {
    // if we find any, we call it
    promisesToResolve();
  }
  waitMap.set(filePath, null);
}

module.exports = new Transformer({
  async loadConfig(configOptions) {
    let jsTransformerResult = JSTransformer[CONFIG].loadConfig.call(this, configOptions);
    // ({fileToDelay, fileToWaitFor} = options.env);
    // console.log('fileToDelay', fileToDelay);
    // ({wait, seen} = waitHandler(fileToDelay, fileToWaitFor));
    let {options} = configOptions;
    const {fileToDelay, fileToWaitFor} = options.env
    return {
      fileToDelay,
      fileToWaitFor,
      ...jsTransformerResult
    };
  },

  async transform(transformOptions) {
    let {asset, config} = transformOptions;
    const {fileToDelay, fileToWaitFor} = config;
    if (asset.filePath.includes(fileToDelay)) {
      await wait(fileToWaitFor);
    }
    let jsTransformer = JSTransformer[CONFIG];
    let transformationResult = await jsTransformer.transform.call(this, transformOptions);
    seen(path.basename(asset.filePath));
    return transformationResult;
  }
});
